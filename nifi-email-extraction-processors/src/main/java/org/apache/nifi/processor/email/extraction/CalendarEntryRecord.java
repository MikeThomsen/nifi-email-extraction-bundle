/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.nifi.processor.email.extraction;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CalendarEntryRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1907699074731119544L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CalendarEntryRecord\",\"namespace\":\"org.apache.nifi.processor.email.extraction\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":[\"null\",\"string\"]},{\"name\":\"date_created\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}]},{\"name\":\"start_date\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"end_date\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"summary\",\"type\":[\"null\",\"string\"]},{\"name\":\"url\",\"type\":[\"null\",\"string\"]},{\"name\":\"attendees\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CalendarEntryRecord> ENCODER =
      new BinaryMessageEncoder<CalendarEntryRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CalendarEntryRecord> DECODER =
      new BinaryMessageDecoder<CalendarEntryRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<CalendarEntryRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<CalendarEntryRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CalendarEntryRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this CalendarEntryRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a CalendarEntryRecord from a ByteBuffer. */
  public static CalendarEntryRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence description;
  @Deprecated public org.joda.time.DateTime date_created;
  @Deprecated public org.joda.time.DateTime start_date;
  @Deprecated public org.joda.time.DateTime end_date;
  @Deprecated public java.lang.CharSequence summary;
  @Deprecated public java.lang.CharSequence url;
  @Deprecated public java.util.List<java.lang.CharSequence> attendees;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CalendarEntryRecord() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param description The new value for description
   * @param date_created The new value for date_created
   * @param start_date The new value for start_date
   * @param end_date The new value for end_date
   * @param summary The new value for summary
   * @param url The new value for url
   * @param attendees The new value for attendees
   */
  public CalendarEntryRecord(java.lang.CharSequence name, java.lang.CharSequence description, org.joda.time.DateTime date_created, org.joda.time.DateTime start_date, org.joda.time.DateTime end_date, java.lang.CharSequence summary, java.lang.CharSequence url, java.util.List<java.lang.CharSequence> attendees) {
    this.name = name;
    this.description = description;
    this.date_created = date_created;
    this.start_date = start_date;
    this.end_date = end_date;
    this.summary = summary;
    this.url = url;
    this.attendees = attendees;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return description;
    case 2: return date_created;
    case 3: return start_date;
    case 4: return end_date;
    case 5: return summary;
    case 6: return url;
    case 7: return attendees;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      TIMESTAMP_CONVERSION,
      TIMESTAMP_CONVERSION,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: description = (java.lang.CharSequence)value$; break;
    case 2: date_created = (org.joda.time.DateTime)value$; break;
    case 3: start_date = (org.joda.time.DateTime)value$; break;
    case 4: end_date = (org.joda.time.DateTime)value$; break;
    case 5: summary = (java.lang.CharSequence)value$; break;
    case 6: url = (java.lang.CharSequence)value$; break;
    case 7: attendees = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'date_created' field.
   * @return The value of the 'date_created' field.
   */
  public org.joda.time.DateTime getDateCreated() {
    return date_created;
  }

  /**
   * Sets the value of the 'date_created' field.
   * @param value the value to set.
   */
  public void setDateCreated(org.joda.time.DateTime value) {
    this.date_created = value;
  }

  /**
   * Gets the value of the 'start_date' field.
   * @return The value of the 'start_date' field.
   */
  public org.joda.time.DateTime getStartDate() {
    return start_date;
  }

  /**
   * Sets the value of the 'start_date' field.
   * @param value the value to set.
   */
  public void setStartDate(org.joda.time.DateTime value) {
    this.start_date = value;
  }

  /**
   * Gets the value of the 'end_date' field.
   * @return The value of the 'end_date' field.
   */
  public org.joda.time.DateTime getEndDate() {
    return end_date;
  }

  /**
   * Sets the value of the 'end_date' field.
   * @param value the value to set.
   */
  public void setEndDate(org.joda.time.DateTime value) {
    this.end_date = value;
  }

  /**
   * Gets the value of the 'summary' field.
   * @return The value of the 'summary' field.
   */
  public java.lang.CharSequence getSummary() {
    return summary;
  }

  /**
   * Sets the value of the 'summary' field.
   * @param value the value to set.
   */
  public void setSummary(java.lang.CharSequence value) {
    this.summary = value;
  }

  /**
   * Gets the value of the 'url' field.
   * @return The value of the 'url' field.
   */
  public java.lang.CharSequence getUrl() {
    return url;
  }

  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(java.lang.CharSequence value) {
    this.url = value;
  }

  /**
   * Gets the value of the 'attendees' field.
   * @return The value of the 'attendees' field.
   */
  public java.util.List<java.lang.CharSequence> getAttendees() {
    return attendees;
  }

  /**
   * Sets the value of the 'attendees' field.
   * @param value the value to set.
   */
  public void setAttendees(java.util.List<java.lang.CharSequence> value) {
    this.attendees = value;
  }

  /**
   * Creates a new CalendarEntryRecord RecordBuilder.
   * @return A new CalendarEntryRecord RecordBuilder
   */
  public static org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder newBuilder() {
    return new org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder();
  }

  /**
   * Creates a new CalendarEntryRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CalendarEntryRecord RecordBuilder
   */
  public static org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder newBuilder(org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder other) {
    return new org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder(other);
  }

  /**
   * Creates a new CalendarEntryRecord RecordBuilder by copying an existing CalendarEntryRecord instance.
   * @param other The existing instance to copy.
   * @return A new CalendarEntryRecord RecordBuilder
   */
  public static org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder newBuilder(org.apache.nifi.processor.email.extraction.CalendarEntryRecord other) {
    return new org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder(other);
  }

  /**
   * RecordBuilder for CalendarEntryRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CalendarEntryRecord>
    implements org.apache.avro.data.RecordBuilder<CalendarEntryRecord> {

    private java.lang.CharSequence name;
    private java.lang.CharSequence description;
    private org.joda.time.DateTime date_created;
    private org.joda.time.DateTime start_date;
    private org.joda.time.DateTime end_date;
    private java.lang.CharSequence summary;
    private java.lang.CharSequence url;
    private java.util.List<java.lang.CharSequence> attendees;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.date_created)) {
        this.date_created = data().deepCopy(fields()[2].schema(), other.date_created);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.start_date)) {
        this.start_date = data().deepCopy(fields()[3].schema(), other.start_date);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.end_date)) {
        this.end_date = data().deepCopy(fields()[4].schema(), other.end_date);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.summary)) {
        this.summary = data().deepCopy(fields()[5].schema(), other.summary);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.url)) {
        this.url = data().deepCopy(fields()[6].schema(), other.url);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.attendees)) {
        this.attendees = data().deepCopy(fields()[7].schema(), other.attendees);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CalendarEntryRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.nifi.processor.email.extraction.CalendarEntryRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.date_created)) {
        this.date_created = data().deepCopy(fields()[2].schema(), other.date_created);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.start_date)) {
        this.start_date = data().deepCopy(fields()[3].schema(), other.start_date);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.end_date)) {
        this.end_date = data().deepCopy(fields()[4].schema(), other.end_date);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.summary)) {
        this.summary = data().deepCopy(fields()[5].schema(), other.summary);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.url)) {
        this.url = data().deepCopy(fields()[6].schema(), other.url);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.attendees)) {
        this.attendees = data().deepCopy(fields()[7].schema(), other.attendees);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.description = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder clearDescription() {
      description = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'date_created' field.
      * @return The value.
      */
    public org.joda.time.DateTime getDateCreated() {
      return date_created;
    }

    /**
      * Sets the value of the 'date_created' field.
      * @param value The value of 'date_created'.
      * @return This builder.
      */
    public org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder setDateCreated(org.joda.time.DateTime value) {
      validate(fields()[2], value);
      this.date_created = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'date_created' field has been set.
      * @return True if the 'date_created' field has been set, false otherwise.
      */
    public boolean hasDateCreated() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'date_created' field.
      * @return This builder.
      */
    public org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder clearDateCreated() {
      date_created = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'start_date' field.
      * @return The value.
      */
    public org.joda.time.DateTime getStartDate() {
      return start_date;
    }

    /**
      * Sets the value of the 'start_date' field.
      * @param value The value of 'start_date'.
      * @return This builder.
      */
    public org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder setStartDate(org.joda.time.DateTime value) {
      validate(fields()[3], value);
      this.start_date = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'start_date' field has been set.
      * @return True if the 'start_date' field has been set, false otherwise.
      */
    public boolean hasStartDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'start_date' field.
      * @return This builder.
      */
    public org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder clearStartDate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'end_date' field.
      * @return The value.
      */
    public org.joda.time.DateTime getEndDate() {
      return end_date;
    }

    /**
      * Sets the value of the 'end_date' field.
      * @param value The value of 'end_date'.
      * @return This builder.
      */
    public org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder setEndDate(org.joda.time.DateTime value) {
      validate(fields()[4], value);
      this.end_date = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'end_date' field has been set.
      * @return True if the 'end_date' field has been set, false otherwise.
      */
    public boolean hasEndDate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'end_date' field.
      * @return This builder.
      */
    public org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder clearEndDate() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'summary' field.
      * @return The value.
      */
    public java.lang.CharSequence getSummary() {
      return summary;
    }

    /**
      * Sets the value of the 'summary' field.
      * @param value The value of 'summary'.
      * @return This builder.
      */
    public org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder setSummary(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.summary = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'summary' field has been set.
      * @return True if the 'summary' field has been set, false otherwise.
      */
    public boolean hasSummary() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'summary' field.
      * @return This builder.
      */
    public org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder clearSummary() {
      summary = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'url' field.
      * @return The value.
      */
    public java.lang.CharSequence getUrl() {
      return url;
    }

    /**
      * Sets the value of the 'url' field.
      * @param value The value of 'url'.
      * @return This builder.
      */
    public org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder setUrl(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.url = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'url' field has been set.
      * @return True if the 'url' field has been set, false otherwise.
      */
    public boolean hasUrl() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'url' field.
      * @return This builder.
      */
    public org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder clearUrl() {
      url = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'attendees' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getAttendees() {
      return attendees;
    }

    /**
      * Sets the value of the 'attendees' field.
      * @param value The value of 'attendees'.
      * @return This builder.
      */
    public org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder setAttendees(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[7], value);
      this.attendees = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'attendees' field has been set.
      * @return True if the 'attendees' field has been set, false otherwise.
      */
    public boolean hasAttendees() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'attendees' field.
      * @return This builder.
      */
    public org.apache.nifi.processor.email.extraction.CalendarEntryRecord.Builder clearAttendees() {
      attendees = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CalendarEntryRecord build() {
      try {
        CalendarEntryRecord record = new CalendarEntryRecord();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0], record.getConversion(0));
        record.description = fieldSetFlags()[1] ? this.description : (java.lang.CharSequence) defaultValue(fields()[1], record.getConversion(1));
        record.date_created = fieldSetFlags()[2] ? this.date_created : (org.joda.time.DateTime) defaultValue(fields()[2], record.getConversion(2));
        record.start_date = fieldSetFlags()[3] ? this.start_date : (org.joda.time.DateTime) defaultValue(fields()[3], record.getConversion(3));
        record.end_date = fieldSetFlags()[4] ? this.end_date : (org.joda.time.DateTime) defaultValue(fields()[4], record.getConversion(4));
        record.summary = fieldSetFlags()[5] ? this.summary : (java.lang.CharSequence) defaultValue(fields()[5], record.getConversion(5));
        record.url = fieldSetFlags()[6] ? this.url : (java.lang.CharSequence) defaultValue(fields()[6], record.getConversion(6));
        record.attendees = fieldSetFlags()[7] ? this.attendees : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[7], record.getConversion(7));
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CalendarEntryRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<CalendarEntryRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CalendarEntryRecord>
    READER$ = (org.apache.avro.io.DatumReader<CalendarEntryRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
